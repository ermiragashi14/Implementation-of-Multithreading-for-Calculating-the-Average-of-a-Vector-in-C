#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define NUM_THREADS 5
#define VECTOR_SIZE 10

double vector[VECTOR_SIZE] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
double average = 0.0;

pthread_mutex_t mutex;

typedef struct {
    int start;
    int end;
    int thread_id;
} ThreadParams;

void *calculate_partial_average(void *params) {

    ThreadParams *p = (ThreadParams *)params;
    double sum = 0.0;

    for (int i = p->start; i < p->end; i++) {
        sum += vector[i];

    }

    double partial_average = sum / (p->end - p->start);
    pthread_mutex_lock(&mutex);
    average += partial_average;
    pthread_mutex_unlock(&mutex);
    printf("Thread %d processed elements from %d to %d, partial average: %.2f\n", p->thread_id, p->start, p->end-1, partial_average);
    pthread_exit(NULL);
}

int main() {

    pthread_t threads[NUM_THREADS];
    ThreadParams params[NUM_THREADS];
    int segment_length = VECTOR_SIZE / NUM_THREADS;
    int remainder = VECTOR_SIZE % NUM_THREADS;
    pthread_mutex_init(&mutex, NULL);
    int current_start = 0;

    for (int i = 0; i < NUM_THREADS; i++) {

        params[i].thread_id = i;
        params[i].start = current_start;
        params[i].end = current_start + segment_length + (remainder-- > 0 ? 1 : 0);
        current_start = params[i].end;

        if (pthread_create(&threads[i], NULL, calculate_partial_average, &params[i]) != 0) {

            perror("Failed to create thread");
            return 1;
        }
    }

    for (int i = 0; i < NUM_THREADS; i++) {

        if (pthread_join(threads[i], NULL) != 0) {
            perror("Failed to join thread");
            return 1;
        }
    }

    average /= NUM_THREADS;
    printf("Final computed average: %.2f\n", average);
    pthread_mutex_destroy(&mutex);
    return 0;
}
